import os
import json
from datetime import datetime
from sqlalchemy import Column, Float, String, Integer, ForeignKey, JSON, DateTime, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
# Database setup
DATABASE_URL = os.environ.get("DATABASE_URL")
engine = create_engine(DATABASE_URL)
Base = declarative_base()
Session = sessionmaker(bind=engine)
class Project(Base):
    """Project table for storing project information."""
    __tablename__ = 'projects'
    
    id = Column(String, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(String)
    status = Column(String)
    start_date = Column(String)
    end_date = Column(String)
    budget = Column(Float)
    spent = Column(Float)
    team_size = Column(Integer)
    risk_score = Column(Float)
    risk_delta = Column(Float)
    schedule_risk = Column(Float)
    budget_risk = Column(Float)
    resource_risk = Column(Float)
    market_risk = Column(Float)
    technical_risk = Column(Float)
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    
    risk_factors = relationship("RiskFactor", back_populates="project", cascade="all, delete-orphan")
    risk_history = relationship("RiskHistory", back_populates="project", cascade="all, delete-orphan")
    
    def to_dict(self):
        """Convert the project object to a dictionary."""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'status': self.status,
            'start_date': self.start_date,
            'end_date': self.end_date,
            'budget': self.budget,
            'spent': self.spent,
            'team_size': self.team_size,
            'risk_score': self.risk_score,
            'risk_delta': self.risk_delta,
            'schedule_risk': self.schedule_risk,
            'budget_risk': self.budget_risk,
            'resource_risk': self.resource_risk,
            'market_risk': self.market_risk,
            'technical_risk': self.technical_risk,
            'risk_factors': [rf.to_dict() for rf in self.risk_factors],
            'risk_history': [rh.to_dict() for rh in self.risk_history],
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
class RiskFactor(Base):
    """Risk factors associated with projects."""
    __tablename__ = 'risk_factors'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    project_id = Column(String, ForeignKey('projects.id'), nullable=False)
    name = Column(String, nullable=False)
    description = Column(String)
    category = Column(String)
    impact = Column(Integer)
    likelihood = Column(Integer)
    mitigation = Column(String)
    
    project = relationship("Project", back_populates="risk_factors")
    
    def to_dict(self):
        """Convert the risk factor to a dictionary."""
        return {
            'id': self.id,
            'project_id': self.project_id,
            'name': self.name,
            'description': self.description,
            'category': self.category,
            'impact': self.impact,
            'likelihood': self.likelihood,
            'mitigation': self.mitigation
        }
class RiskHistory(Base):
    """Historical risk scores for projects."""
    __tablename__ = 'risk_history'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    project_id = Column(String, ForeignKey('projects.id'), nullable=False)
    date = Column(String, nullable=False)
    risk_score = Column(Float, nullable=False)
    
    project = relationship("Project", back_populates="risk_history")
    
    def to_dict(self):
        """Convert the risk history entry to a dictionary."""
        return {
            'id': self.id,
            'project_id': self.project_id,
            'date': self.date,
            'risk_score': self.risk_score
        }
class RiskReport(Base):
    """Risk reports generated by the system."""
    __tablename__ = 'risk_reports'
    
    id = Column(String, primary_key=True)
    project_id = Column(String, ForeignKey('projects.id'), nullable=False)
    date = Column(String, nullable=False)
    risk_score = Column(Float)
    content = Column(JSON)  # Store the full report content as JSON
    
    def to_dict(self):
        """Convert the risk report to a dictionary."""
        return {
            'id': self.id,
            'project_id': self.project_id,
            'date': self.date,
            'risk_score': self.risk_score,
            'content': self.content
        }
def initialize_database():
    """Initialize the database and load sample data if needed."""
    # Create tables if they don't exist
    Base.metadata.create_all(engine)
    
    # Check if data already exists
    session = Session()
    existing_projects = session.query(Project).count()
    
    if existing_projects == 0:
        print("Initialized database with sample data")
        # Load sample data
        sample_data = [
            {
                'id': 'PRJ001',
                'name': 'Project Alpha',
                'description': 'A critical infrastructure upgrade project',
                'status': 'In Progress',
                'start_date': '2025-01-15',
                'end_date': '2025-07-30',
                'budget': 1250000,
                'spent': 450000,
                'team_size': 12,
                'risk_score': 7.8,
                'risk_delta': 1.2,
                'schedule_risk': 8.5,
                'budget_risk': 6.2,
                'resource_risk': 7.1,
                'market_risk': 5.8,
                'technical_risk': 8.3,
                'risk_factors': [
                    {
                        'name': 'Supply Chain Delays',
                        'description': 'Key components may face shipping delays due to global logistics issues',
                        'category': 'schedule_risk',
                        'impact': 9,
                        'likelihood': 7,
                        'mitigation': 'Identify alternative suppliers and establish buffer inventory'
                    },
                    {
                        'name': 'Technical Complexity',
                        'description': 'Integration with legacy systems presents significant technical challenges',
                        'category': 'technical_risk',
                        'impact': 8,
                        'likelihood': 9,
                        'mitigation': 'Allocate senior developers and conduct thorough testing phases'
                    },
                    {
                        'name': 'Resource Availability',
                        'description': 'Specialized skills required may not be available when needed',
                        'category': 'resource_risk',
                        'impact': 7,
                        'likelihood': 6,
                        'mitigation': 'Develop training program and consider contracting specialists'
                    }
                ],
                'risk_history': [
                    {'date': '2025-01-15', 'risk_score': 5.2},
                    {'date': '2025-02-15', 'risk_score': 6.1},
                    {'date': '2025-03-15', 'risk_score': 6.6},
                    {'date': '2025-04-11', 'risk_score': 7.8}
                ]
            },
            {
                'id': 'PRJ002',
                'name': 'Project Beta',
                'description': 'New product development for healthcare sector',
                'status': 'On Track',
                'start_date': '2025-02-01',
                'end_date': '2025-10-31',
                'budget': 980000,
                'spent': 310000,
                'team_size': 8,
                'risk_score': 4.2,
                'risk_delta': -0.5,
                'schedule_risk': 3.8,
                'budget_risk': 4.5,
                'resource_risk': 3.9,
                'market_risk': 6.1,
                'technical_risk': 4.8,
                'risk_factors': [
                    {
                        'name': 'Regulatory Approval',
                        'description': 'Product may face delays in obtaining necessary regulatory approvals',
                        'category': 'market_risk',
                        'impact': 8,
                        'likelihood': 5,
                        'mitigation': 'Engage regulatory consultants early and maintain documentation'
                    },
                    {
                        'name': 'Market Competition',
                        'description': 'Competitors may launch similar products before our release',
                        'category': 'market_risk',
                        'impact': 7,
                        'likelihood': 6,
                        'mitigation': 'Accelerate development timeline and enhance unique value propositions'
                    }
                ],
                'risk_history': [
                    {'date': '2025-02-01', 'risk_score': 4.8},
                    {'date': '2025-03-01', 'risk_score': 5.1},
                    {'date': '2025-04-01', 'risk_score': 4.7},
                    {'date': '2025-04-11', 'risk_score': 4.2}
                ]
            },
            {
                'id': 'PRJ003',
                'name': 'Project Gamma',
                'description': 'Digital transformation initiative for finance operations',
                'status': 'At Risk',
                'start_date': '2024-11-01',
                'end_date': '2025-06-30',
                'budget': 1850000,
                'spent': 950000,
                'team_size': 15,
                'risk_score': 8.9,
                'risk_delta': 2.1,
                'schedule_risk': 9.2,
                'budget_risk': 8.7,
                'resource_risk': 7.6,
                'market_risk': 4.5,
                'technical_risk': 9.1,
                'risk_factors': [
                    {
                        'name': 'Budget Overruns',
                        'description': 'Project is exceeding initial budget estimates due to scope changes',
                        'category': 'budget_risk',
                        'impact': 9,
                        'likelihood': 8,
                        'mitigation': 'Implement strict change control process and reassess scope priorities'
                    },
                    {
                        'name': 'Schedule Slippage',
                        'description': 'Key milestones are being missed due to technical challenges',
                        'category': 'schedule_risk',
                        'impact': 9,
                        'likelihood': 9,
                        'mitigation': 'Add resources to critical path tasks and reduce scope where possible'
                    },
                    {
                        'name': 'System Integration Issues',
                        'description': 'Integration with legacy financial systems proving more complex than anticipated',
                        'category': 'technical_risk',
                        'impact': 8,
                        'likelihood': 9,
                        'mitigation': 'Engage vendor expertise and implement phased approach to integration'
                    },
                    {
                        'name': 'Stakeholder Alignment',
                        'description': 'Different departments have conflicting requirements and priorities',
                        'category': 'resource_risk',
                        'impact': 7,
                        'likelihood': 8,
                        'mitigation': 'Conduct alignment workshops and establish clear governance structure'
                    }
                ],
                'risk_history': [
                    {'date': '2024-11-01', 'risk_score': 5.3},
                    {'date': '2024-12-01', 'risk_score': 6.2},
                    {'date': '2025-01-01', 'risk_score': 7.1},
                    {'date': '2025-02-01', 'risk_score': 7.8},
                    {'date': '2025-03-01', 'risk_score': 8.2},
                    {'date': '2025-04-01', 'risk_score': 8.9}
                ]
            },
            {
                'id': 'PRJ004',
                'name': 'Project Delta',
                'description': 'Mobile application development for customer engagement',
                'status': 'In Progress',
                'start_date': '2025-03-15',
                'end_date': '2025-09-30',
                'budget': 450000,
                'spent': 120000,
                'team_size': 6,
                'risk_score': 5.4,
                'risk_delta': 0.0,
                'schedule_risk': 5.2,
                'budget_risk': 4.8,
                'resource_risk': 6.1,
                'market_risk': 6.3,
                'technical_risk': 4.5,
                'risk_factors': [
                    {
                        'name': 'User Adoption',
                        'description': 'Target users may be resistant to adopting the new application',
                        'category': 'market_risk',
                        'impact': 8,
                        'likelihood': 6,
                        'mitigation': 'Conduct user research and implement intuitive design principles'
                    },
                    {
                        'name': 'Technology Stack',
                        'description': 'Selected technologies may have scaling limitations',
                        'category': 'technical_risk',
                        'impact': 6,
                        'likelihood': 5,
                        'mitigation': 'Conduct performance testing early and prepare alternative approaches'
                    }
                ],
                'risk_history': [
                    {'date': '2025-03-15', 'risk_score': 5.4},
                    {'date': '2025-04-01', 'risk_score': 5.4}
                ]
            },
            {
                'id': 'PRJ005',
                'name': 'Project Epsilon',
                'description': 'Data center migration and modernization',
                'status': 'Planning',
                'start_date': '2025-05-01',
                'end_date': '2026-02-28',
                'budget': 3250000,
                'spent': 450000,
                'team_size': 18,
                'risk_score': 6.7,
                'risk_delta': 0.0,
                'schedule_risk': 6.5,
                'budget_risk': 7.1,
                'resource_risk': 5.8,
                'market_risk': 3.2,
                'technical_risk': 7.4,
                'risk_factors': [
                    {
                        'name': 'Service Disruption',
                        'description': 'Migration may cause unplanned service outages',
                        'category': 'technical_risk',
                        'impact': 9,
                        'likelihood': 7,
                        'mitigation': 'Develop detailed fallback plans and conduct multiple rehearsals'
                    },
                    {
                        'name': 'Hardware Delays',
                        'description': 'Long lead times for specialized hardware procurement',
                        'category': 'schedule_risk',
                        'impact': 7,
                        'likelihood': 8,
                        'mitigation': 'Order critical components early and identify alternative suppliers'
                    },
                    {
                        'name': 'Cost Escalation',
                        'description': 'Hardware and software costs may exceed initial estimates',
                        'category': 'budget_risk',
                        'impact': 8,
                        'likelihood': 7,
                        'mitigation': 'Establish cost contingency and explore leasing options'
                    }
                ],
                'risk_history': [
                    {'date': '2025-04-01', 'risk_score': 6.7}
                ]
            }
        ]
        
        # Add sample data to database
        for project_data in sample_data:
            # Create project
            project = Project(
                id=project_data['id'],
                name=project_data['name'],
                description=project_data['description'],
                status=project_data['status'],
                start_date=project_data['start_date'],
                end_date=project_data['end_date'],
                budget=project_data['budget'],
                spent=project_data['spent'],
                team_size=project_data['team_size'],
                risk_score=project_data['risk_score'],
                risk_delta=project_data['risk_delta'],
                schedule_risk=project_data['schedule_risk'],
                budget_risk=project_data['budget_risk'],
                resource_risk=project_data['resource_risk'],
                market_risk=project_data['market_risk'],
                technical_risk=project_data['technical_risk']
            )
            
            # Add risk factors
            for factor_data in project_data['risk_factors']:
                factor = RiskFactor(
                    name=factor_data['name'],
                    description=factor_data['description'],
                    category=factor_data['category'],
                    impact=factor_data['impact'],
                    likelihood=factor_data['likelihood'],
                    mitigation=factor_data['mitigation']
                )
                project.risk_factors.append(factor)
            
            # Add risk history
            for history_data in project_data['risk_history']:
                history = RiskHistory(
                    date=history_data['date'],
                    risk_score=history_data['risk_score']
                )
                project.risk_history.append(history)
            
            session.add(project)
        
        session.commit()
    else:
        print("Database already contains data")
    
    session.close()
def get_projects():
    """Get all projects from the database."""
    session = Session()
    projects = session.query(Project).all()
    result = [project.to_dict() for project in projects]
    session.close()
    return result
def get_project(project_id):
    """Get a specific project by ID."""
    session = Session()
    project = session.query(Project).filter(Project.id == project_id).first()
    result = project.to_dict() if project else None
    session.close()
    return result
def save_risk_report(report_data):
    """Save a risk report to the database."""
    session = Session()
    
    report = RiskReport(
        id=report_data['id'],
        project_id=report_data['project_id'],
        date=report_data['date'],
        risk_score=report_data['risk_score'],
        content=report_data['content']
    )
    
    session.add(report)
    session.commit()
    session.close()
    
    return report.id
def get_risk_factors(project_id=None):
    """Get risk factors, optionally filtered by project ID."""
    session = Session()
    
    if project_id:
        risk_factors = session.query(RiskFactor).filter(RiskFactor.project_id == project_id).all()
    else:
        risk_factors = session.query(RiskFactor).all()
    
    result = [factor.to_dict() for factor in risk_factors]
    session.close()
    
    return result
def search_similar_risks(query_text, n_results=5):
    """
    Search for similar risk factors based on text query.
    Note: This is a simplified implementation that doesn't do semantic search.
    In a real application, you might want to use a vector database or full-text search.
    """
    session = Session()
    all_factors = session.query(RiskFactor).all()
    
    # Very basic search by checking if query terms are in name or description
    query_terms = query_text.lower().split()
    matched_factors = []
    
    for factor in all_factors:
        factor_dict = factor.to_dict()
        
        # Get project name for context
        project = session.query(Project).filter(Project.id == factor.project_id).first()
        if project:
            factor_dict['project_name'] = project.name
        
        # Simple keyword matching
        name_lower = factor.name.lower()
        desc_lower = factor.description.lower() if factor.description else ""
        
        match_score = 0
        for term in query_terms:
            if term in name_lower:
                match_score += 2  # Higher weight for matches in name
            if term in desc_lower:
                match_score += 1
        
        if match_score > 0:
            factor_dict['match_score'] = match_score
            matched_factors.append(factor_dict)
    
    # Sort by match score and limit to n_results
    matched_factors.sort(key=lambda x: x.get('match_score', 0), reverse=True)
    result = matched_factors[:n_results]
    
    session.close()
    return result